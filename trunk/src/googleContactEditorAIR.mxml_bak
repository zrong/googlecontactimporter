<?xml version="1.0" encoding="utf-8"?>
<s:WindowedApplication xmlns:fx="http://ns.adobe.com/mxml/2009" 
					   xmlns:s="library://ns.adobe.com/flex/spark" 
					   xmlns:mx="library://ns.adobe.com/flex/mx"
					   showStatusBar="false"
					   applicationComplete="init()">
	<fx:Script>
		<![CDATA[
			import google.EventVO;
			import google.GoogleContact;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.effects.IAbstractEffect;
			import mx.utils.ObjectUtil;
			
			import org.zengrong.events.InfoEvent;
			
			private var gc:GoogleContact;
			private var defaultFile:File;
			private var csvFile:File;
			private var csvStream:FileStream;
			
			private var importGroup:Object;	//保存被导入的Group值。所有导入的联系人都会属于这个群组。如果该值为null，说明导入的时候没有选择要导入到一个组中。
			[Bindable]
			private var googleGroupAC:ArrayCollection;	//从google账户中提取的群组
			[Bindable]
			private var csvGroupAC:ArrayCollection;		//从CSV中获取名称为“群组”的数组
			[Bindable]
			private var csvAC:ArrayCollection;	//包含所有要CSV中的用户条目
			[Bindable]
			private var entryItemAC:ArrayCollection;	//包含CSV中的通讯录项目，和google Contact中的通讯录项目
						
			private function init():void
			{
				gc = new GoogleContact();
				gc.addEventListener(GoogleContact.EVENT_AUTH_SUCCESS, gc_authSuccessHandler);
				gc.addEventListener(GoogleContact.EVENT_CONTENT_CREATED, gc_contentCreatedHandler);
				gc.addEventListener(GoogleContact.EVENT_GROUP_CREATED, gc_groupCreatedHandler);
				gc.addEventListener(GoogleContact.EVENT_GROUP_GET, gc_groupGetHandler);
				gc.addEventListener(GoogleContact.EVENT_ERROR, gc_errorHandler);
				
				defaultFile = File.desktopDirectory;
				csvStream = new FileStream();
			}
			
			private function gc_authSuccessHandler($evt:InfoEvent):void
			{
				var __info:String = '登录成功！\ntoken：'+$evt.info.info;
				echo(__info);
				first.enabled = false;
				second.enabled = true;
				gc.getGroups();
			}
			
			private function gc_contentCreatedHandler($evt:InfoEvent):void
			{
				echo($evt.info.info);
				alert($evt.info.info);
			}
			
			private function gc_groupGetHandler($evt:InfoEvent):void
			{
				echo('获取联系人群组成功！');
				googleGroupAC = new ArrayCollection();
//				default xml namespace = gc.NS_ATOM;
				var __xml:XML = XML($evt.info.info);
				var __ns_atom = gc.NS_ATOM;
				var __ns_gd = gc.NS_GD;
				
				var __entryList:XMLList = __xml.__ns_atom::entry;
				//系统群组的QName
				var __name:QName = new QName(gc.NS_GC, 'systemGroup');
				for each(var entry:XML in __entryList)
				{
					//将系统群组的id提取出来进行显示，非系统群组采用title进行显示
					if(entry.hasOwnProperty(__name))
					{
//						googleGroupAC.addItem(	{	label:entry.elements(__name).@id.toString(), 
//													data:entry.id.toString()	});
						googleGroupAC.addItem(	{	label:entry.elements(__name).attributes(@id.toString(), 
													data:entry.id.toString()	});
					}
					else
					{
//						googleGroupAC.addItem(	{	label:entry.title.toString(), 
//													data:entry.id.toString()	});
						googleGroupAC.addItem(	{	label:entry.title.toString(), 
													data:entry.id.toString()	});
					}
				}
			}
			
			private function gc_groupCreatedHandler($evt:InfoEvent):void
			{
				echo($evt.info.info);
				alert($evt.info.info);
			}
			
			private function gc_errorHandler($evt:InfoEvent):void
			{
				var __errVO:EventVO = $evt.info as EventVO;
				echo(__errVO.info);
				alert(__errVO.info);
			}
			
			private function csv_selectHandler(evt:Event):void
			{
				var __selectFile:File = evt.target as File;
				if(__selectFile.extension.toLowerCase() != 'csv')
				{
					alert('选择的不是CSV文件！');
				}
				else
				{
					csvStream.open(__selectFile, FileMode.READ);
					var __csv:String = csvStream.readUTFBytes(csvStream.bytesAvailable);
					buildContactArray(__csv);
					third.enabled = true;
					fourth.enabled = true;
					fifth.enabled = true;
				}				
			}
			
			private function buildContactArray($csv:String):void
			{
				//清除csv文件中字段两边的引号
				var __csv:String = $csv.replace(/\"/g, '');
				var __all:Array = __csv.split('\n'); 
				var __names:Array = String(__all[0]).split(',');
				//获取不重复的群组名称作用的临时对象
				var __tmpGroupObj:Object = new Object();
				
				//填充csvAC与groupArray
				csvGroupAC = new ArrayCollection();
				csvAC = new ArrayCollection();				
				echo('CSV标题名称：\n'+__names);
				echo('包含标题的数组长度：'+ __all.length);			
				for(var i:int=1; i<__all.length; i++)
				{
					var __obj:Object = new Object();
					var __values:Array = String(__all[i]).split(',');
					for(var j:int=0; j<__names.length; j++)
					{
						__obj[__names[j]] = __values[j];
						//将群组的值进行过滤，存入临时的Object中（Object不允许有重复的名称，此举可以过滤掉重复的群组值）
						if(__names[j] == '群组')
						{
							if(__values[j] != '*' && __values[j] != undefined)
							{
								__tmpGroupObj[__values[j]] = true;
							}
						}
					}					
					csvAC.addItem(__obj);
				}
				//从临时Object中获取不重复的群组名称数组
				for(var l:String in __tmpGroupObj)
				{
					var __groupObj:Object = new Object();
					__groupObj.label = l;
					csvGroupAC.addItem(__groupObj);
				}
				
				//填充entryItemAC
				entryItemAC = new ArrayCollection();
				var __itemNameArr:Array = gc.getEntryNames();
				__itemNameArr.unshift('*未选择*');
				var __itemNameList:ArrayCollection = new ArrayCollection(__itemNameArr);
				for each(var k:String in __names)
				{
					var __itemObj:Object = new Object();
					__itemObj.itemName = k;
					__itemObj.dp = __itemNameList;
					entryItemAC.addItem(__itemObj);
				}
				
				echo('最终建立的数组的长度：'+csvAC.length);
			}
			
			private function selectCSVBTN_clickHandler():void
			{
				if(csvFile == null)
				{
					csvFile = defaultFile;
				}
				else
				{
					if(csvFile.hasEventListener(Event.SELECT))
					{
						csvFile.removeEventListener(Event.SELECT, csv_selectHandler);
					}
				}
				csvFile.addEventListener(Event.SELECT, csv_selectHandler);
				csvFile.browseForOpen('选择CSV文件', [new FileFilter('CSV文件','*.csv')]);			
			}
			
			private function createGroupBTN_clickHandler():void
			{
				//要新建的group的数组
				var __createGroup:Array = [];
				//循环剔除google账户中已有的同名组，表并将同名组的url保存到CSV群组中
				for(var i:int=0; i<csvGroupAC.length; i++)
				{
					var __isMatching:Boolean = false;
					var __data:String;
					var __i:Object = csvGroupAC.getItemAt(i);
					for(var j:int=0; j<googleGroupAC.length; j++)
					{
						var __j:Object = googleGroupAC.getItemAt(j);
						if(__i.label == __j.label)
						{
							__isMatching = true;
							__data = __j.data;
							break;
						}
					}
					if(__isMatching)
					{
						//将google账户与CSV中同名的群组的url保存到CSV群组中备用
						__i.data = __data;
					}
					else
					{
						__createGroup.push(__i.label);
					}
				}
				//检查用户是否选择了一个已有组仅需导入，或者输入了一个新组
				if(importToGoogleGroupCB.selected)
				{
					if(selectImportGroupCOB.selectedIndex == -1)
					{
						alert('必须输入一个要新建的群组名称');
					}
					else if(selectImportGroupCOB.selectedIndex == -3)
					{
						var __noBlank:RegExp = /\S/g;
						var __name:String = String(selectImportGroupCOB.selectedItem);
						//若输入的新群组名称合法，就将其保存在需要创建的新群组列表中的，并为同时导入的群组赋值
						if(__noBlank.test(__name))
						{
							var __nameNoBlank:String = __name.replace(/\s/g, '');
							importGroup = {label:__nameNoBlank};
							__createGroup.push(__nameNoBlank);
						}
						else
						{
							alert('字符名称不能为空格！');
						}
					}
					else
					{
						//若用户选择了一个群组，就将使用这个群组为导入的群组赋值
						importGroup = selectImportGroupCOB.selectedItem;
					}
				}
				else
				{
					importGroup = null;
				}
//				trace(ObjectUtil.toString(importGroup));
//				trace(ObjectUtil.toString(__createGroup));
				gc.insertGroup(gc.getGroupInsertBatch(__createGroup), true);
			}
			
			private function alert($msg:String):void
			{
				Alert.show($msg);
			}
			
			private function echo($str:String):void
			{
				infoTA.text += $str+'\n';
			}
		]]>
	</fx:Script>
	<fx:Style source="assets/style.css"/>
	<s:layout>
		<s:HorizontalLayout paddingLeft="10" paddingTop="10"/>
	</s:layout>
	<s:VGroup horizontalAlign="center" width="300" height="100%">
		<s:BorderContainer id="first" backgroundColor="#CCCCCC" width="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" paddingBottom="5" paddingTop="5"/>
			</s:layout>
			<s:Label text="第一步：登录" styleName="redBold"/>
			<mx:Form id="loginForm" dropShadowVisible="false" defaultButton="{submitBTN}" width="100%">
				<mx:FormItem label="Gmail账户：" width="100%">
					<s:TextInput id="googleUserTI" width="100%"/>
				</mx:FormItem>
				<mx:FormItem label="Gmail密码：" width="100%">
					<s:TextInput id="googlePWDTI" displayAsPassword="true" width="100%"/>
				</mx:FormItem>
			</mx:Form>			
			<s:Button id="submitBTN" label="验证帐号" left="20" click="gc.login(googleUserTI.text, googlePWDTI.text)"/>
		</s:BorderContainer>
		<s:BorderContainer id="second" backgroundColor="#CCCCCC" width="100%" height="60" enabled="false">
			<s:layout>
				<s:VerticalLayout paddingTop="5" paddingBottom="5" horizontalAlign="center"/>
			</s:layout>
			<s:Label text="第二步：选择CSV文件" styleName="redBold"/>
			<s:Button id="selectCSVBTN" label="选择CSV文件" click="selectCSVBTN_clickHandler()"/>
		</s:BorderContainer>
		<s:BorderContainer id="third" backgroundColor="#CCCCCC" width="100%" enabled="false">
			<s:layout>
				<s:VerticalLayout paddingTop="5" horizontalAlign="center" paddingLeft="5" paddingRight="5" paddingBottom="5"/>
			</s:layout>
			<s:Label text="第三步：设置群组" styleName="redBold"/>
			<s:CheckBox id="importToGoogleGroupCB" label="将导入的所有联系人也添加到："/>
			<s:ComboBox id="selectImportGroupCOB" width="100%" enabled="{importToGoogleGroupCB.selected}" dataProvider="{googleGroupAC}" toolTip="选择一个已有的组，或者输入一个新组"/>
			<s:Label text="从CSV中获取的组："/>
			<s:DropDownList id="showCSVGroupDDL" width="100%" dataProvider="{csvGroupAC}" requireSelection="true" toolTip="若google联系人中已有同名的组，则会使用google联系人中的组。此处仅起到显示的作用。"/>
		</s:BorderContainer>
		<s:BorderContainer id="fourth" backgroundColor="#CCCCCC" width="100%" height="100%" enabled="false">
			<s:layout>
				<s:VerticalLayout paddingTop="5" horizontalAlign="center"/>
			</s:layout>
			<s:Label text="第四步：设置映射" styleName="redBold"/>
			<s:Scroller width="100%" height="100%">
				<s:DataGroup itemRenderer="comp.EntryItem" width="100%" height="100%" dataProvider="{entryItemAC}">
					<s:layout>
						<s:VerticalLayout horizontalAlign="center"/>
					</s:layout>
				</s:DataGroup>	
			</s:Scroller>			
		</s:BorderContainer>
	</s:VGroup>
	<s:VGroup width="100%" height="100%">
		<s:HGroup width="100%" height="60">
			<s:BorderContainer id="fifth" width="50%" backgroundColor="#CCCCCC" height="100%" enabled="false">
				<s:layout>
					<s:VerticalLayout paddingTop="5" horizontalAlign="center"/>
				</s:layout>
				<s:Label text="第五步：创建群组" styleName="redBold"/>
				<s:Button id="createGroupBTN" label="创建群组" click="createGroupBTN_clickHandler()"/>
			</s:BorderContainer>
			<s:BorderContainer id="sixth" width="50%" backgroundColor="#CCCCCC" height="100%">
				<s:layout>
					<s:VerticalLayout paddingTop="5" horizontalAlign="center"/>
				</s:layout>
				<s:Label text="第六步：导入联系人" styleName="redBold"/>
			</s:BorderContainer>
		</s:HGroup>
		<mx:DataGrid width="100%" height="30%" dataProvider="{csvAC}"/>
		<s:TextArea id="infoTA" width="100%" height="70%"/>
	</s:VGroup>
</s:WindowedApplication>